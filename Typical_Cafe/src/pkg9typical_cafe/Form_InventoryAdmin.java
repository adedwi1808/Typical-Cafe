/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg9typical_cafe;

import Koneksi.Koneksi;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author wolfie
 */
public class Form_InventoryAdmin extends javax.swing.JInternalFrame {

    /**
     * Creates new form Form_InventoryAdmin
     */
    Connection con;
    Statement stat;
    ResultSet rs;
    String sql;
    public Form_InventoryAdmin() {
        initComponents();
        Koneksi DB = new Koneksi();
        DB.config();
        con = DB.con;
        stat = DB.stm;
        loadTabel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jL_Label = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jT_inventory = new javax.swing.JTable();
        jL_idInventory = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTF_idInventory = new javax.swing.JTextField();
        jTF_jumlah = new javax.swing.JTextField();
        jB_refresh = new javax.swing.JButton();
        jB_create = new javax.swing.JButton();
        jB_edit = new javax.swing.JButton();
        jB_delete = new javax.swing.JButton();
        jTF_search = new javax.swing.JTextField();
        jB_search = new javax.swing.JButton();
        jTF_namaInventory = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(1280, 590));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jL_Label.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jL_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_Label.setText("Inventory");
        getContentPane().add(jL_Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 0, 196, 65));

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jLabel4.setText("Nama Inventory");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, 140, -1));

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jLabel5.setText("Jumlah");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 190, 120, -1));

        jT_inventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nama Inventory", "Jumlah"
            }
        ));
        jT_inventory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jT_inventoryMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jT_inventory);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 350, 1260, 190));

        jL_idInventory.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jL_idInventory.setText("ID Inventory");
        getContentPane().add(jL_idInventory, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, 120, -1));

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jLabel7.setText(":");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 110, 20, -1));

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jLabel8.setText(":");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 150, 20, -1));

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jLabel9.setText(":");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 190, 20, -1));

        jTF_idInventory.setEditable(false);
        jTF_idInventory.setEnabled(false);
        getContentPane().add(jTF_idInventory, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 100, 440, 40));
        getContentPane().add(jTF_jumlah, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 180, 440, 40));

        jB_refresh.setText("Refresh");
        jB_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_refreshActionPerformed(evt);
            }
        });
        getContentPane().add(jB_refresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 240, 140, 40));

        jB_create.setText("Create");
        jB_create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_createActionPerformed(evt);
            }
        });
        getContentPane().add(jB_create, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 240, 140, 40));

        jB_edit.setText("Edit");
        jB_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_editActionPerformed(evt);
            }
        });
        getContentPane().add(jB_edit, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 240, 140, 40));

        jB_delete.setText("Delete");
        jB_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_deleteActionPerformed(evt);
            }
        });
        getContentPane().add(jB_delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 240, 140, 40));
        getContentPane().add(jTF_search, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 290, 450, 40));

        jB_search.setText("Search");
        jB_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_searchActionPerformed(evt);
            }
        });
        getContentPane().add(jB_search, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 290, -1, 40));
        getContentPane().add(jTF_namaInventory, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 140, 440, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jT_inventoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_inventoryMouseClicked
        // TODO add your handling code here:
        jTF_idInventory.setText(String.valueOf(jT_inventory.getValueAt(jT_inventory.getSelectedRow(),0)));
        jTF_namaInventory.setText(String.valueOf( jT_inventory.getValueAt(jT_inventory.getSelectedRow(),1)));
        jTF_jumlah.setText(String.valueOf( jT_inventory.getValueAt(jT_inventory.getSelectedRow(),2)));
    }//GEN-LAST:event_jT_inventoryMouseClicked

    private void jB_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_refreshActionPerformed
        loadTabel();
    }//GEN-LAST:event_jB_refreshActionPerformed

    private void jB_createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_createActionPerformed
        // TODO add your handling code here:
        create();
    }//GEN-LAST:event_jB_createActionPerformed

    private void jB_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_editActionPerformed
        editData();
    }//GEN-LAST:event_jB_editActionPerformed

    private void jB_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_deleteActionPerformed
        delete();
    }//GEN-LAST:event_jB_deleteActionPerformed

    private void jB_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_searchActionPerformed
        String cariData = jTF_search.getText();
        if(cariData.isEmpty()){
            JOptionPane.showMessageDialog(this, "Isikan data pencarian");
        }else{
            searchData(cariData);
        }
        clear();

    }//GEN-LAST:event_jB_searchActionPerformed
private void editData(){
        try {
           if(!jTF_namaInventory.getText().isEmpty() && !jTF_jumlah.getText().isEmpty()){

                sql = "UPDATE inventory SET nama_inventory='"+ jTF_namaInventory.getText() + "', jumlah_inventory='" + jTF_jumlah.getText() + "' WHERE id_inventory ='" + String.valueOf(jT_inventory.getValueAt(jT_inventory.getSelectedRow(),0))+"'";
                stat.executeUpdate(sql);
                
                JOptionPane.showMessageDialog(this, "Data Berhasil Diedit");
            }else{
                JOptionPane.showMessageDialog(this, "Data isian ada yang kosong");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error edit data");
        }
        loadTabel();
        clear();
    }
    
    private void searchData(String cariData){
        DefaultTableModel tb = new DefaultTableModel();
        tb.addColumn("ID Inventory");
        tb.addColumn("Nama Inventory");
        tb.addColumn("Jumlah");

        jT_inventory.setModel(tb);
  
       try {
            sql = "SELECT * FROM inventory WHERE nama_inventory LIKE '%" + cariData + "'";
            rs = stat.executeQuery(sql);
            
            while(rs.next()){
               tb.addRow(new Object[] {
                   rs.getString("id_inventory"),
                   rs.getString("nama_inventory"),
                   rs.getString("jumlah_inventory"),

               });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
          
        clear();
    }
    private void loadTabel() {
        DefaultTableModel tb = new DefaultTableModel();
        tb.addColumn("ID Inventory");
        tb.addColumn("Nama Inventory");
        tb.addColumn("Jumlah");

        jT_inventory.setModel(tb);
    
       try {
            sql = "SELECT * FROM inventory";
            rs = stat.executeQuery(sql);
            
            while(rs.next()){
               tb.addRow(new Object[] {
                   rs.getString("id_inventory"),
                   rs.getString("nama_inventory"),
                   rs.getString("jumlah_inventory"),
               });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
          
        clear();
    }
    
    private void clear(){
        jTF_idInventory.setText("");
        jTF_namaInventory.setText("");
        jTF_jumlah.setText("");
    }
    
    private void create(){
        try {
 
            if(!jTF_namaInventory.getText().isEmpty() && !jTF_jumlah.getText().isEmpty()){
                
                sql = "INSERT INTO inventory (nama_inventory, jumlah_inventory) VALUES('" + jTF_namaInventory.getText() + "', '" + 
                        jTF_jumlah.getText() +"')";
                stat.executeUpdate(sql);
                 JOptionPane.showMessageDialog(this, "Invetory Berhasil ditambahkan");   
                 
            }else{
                JOptionPane.showMessageDialog(this, "Data Inventory Masih ada yang Kosong");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error input data" + e);
             
        }
        
        loadTabel();
        clear();
    }
    
    private void delete(){
        String id = String.valueOf(jT_inventory.getValueAt(jT_inventory.getSelectedRow(),0));
        int check = Integer.valueOf(id);
        if(check>14){
            try {
                    if (JOptionPane.showConfirmDialog(this, "Yakin menghapus data", "Peringatan", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                    sql = "DELETE FROM inventory WHERE id_inventory='" + id + "'";
                    stat.executeUpdate(sql);
                }else{
                    return;
                }
            } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Pilih id terlebih dahulu");
            }
        }else {
            JOptionPane.showMessageDialog(this, "Inventory ini merupakan bahan utama menu !!!");
        }
        loadTabel();
        clear();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_create;
    private javax.swing.JButton jB_delete;
    private javax.swing.JButton jB_edit;
    private javax.swing.JButton jB_refresh;
    private javax.swing.JButton jB_search;
    private javax.swing.JLabel jL_Label;
    private javax.swing.JLabel jL_idInventory;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTF_idInventory;
    private javax.swing.JTextField jTF_jumlah;
    private javax.swing.JTextField jTF_namaInventory;
    private javax.swing.JTextField jTF_search;
    private javax.swing.JTable jT_inventory;
    // End of variables declaration//GEN-END:variables
}
